{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nclass NgxCSVParserError {}\n\nlet NgxCsvParser = /*#__PURE__*/(() => {\n  class NgxCsvParser {\n    constructor() {\n      this.defaultCSVParserConfig = {\n        header: true,\n        delimiter: ',',\n        encoding: 'utf8'\n      };\n    }\n\n    parse(csvFile, config) {\n      config = Object.assign(Object.assign({}, this.defaultCSVParserConfig), config);\n      const ngxCSVParserObserver = new Observable(observer => {\n        try {\n          let csvRecords = null;\n\n          if (this.isCSVFile(csvFile)) {\n            const reader = new FileReader();\n            reader.readAsText(csvFile, config.encoding);\n\n            reader.onload = () => {\n              const csvData = reader.result.trim();\n\n              if (csvData) {\n                const csvRecordsArray = this.csvStringToArray(csvData, config.delimiter);\n                const headersRow = this.getHeaderArray(csvRecordsArray);\n                csvRecords = this.getDataRecordsArrayFromCSVFile(csvRecordsArray, headersRow.length, config);\n                observer.next(csvRecords);\n              } else {\n                observer.next([]);\n              }\n\n              observer.complete();\n            };\n\n            reader.onerror = () => {\n              this.badCSVDataFormatErrorHandler(observer);\n            };\n          } else {\n            this.notCSVFileErrorHandler(observer);\n          }\n        } catch (error) {\n          this.unknownCSVParserErrorHandler(observer);\n        }\n      });\n      return ngxCSVParserObserver;\n    }\n\n    csvStringToArray(csvDataString, delimiter) {\n      const regexPattern = new RegExp(`(\\\\${delimiter}|\\\\r?\\\\n|\\\\r|^)(?:\\\"((?:\\\\\\\\.|\\\"\\\"|[^\\\\\\\\\\\"])*)\\\"|([^\\\\${delimiter}\\\"\\\\r\\\\n]*))`, 'gi');\n      let matchedPatternArray = regexPattern.exec(csvDataString);\n      const resultCSV = [[]];\n\n      while (matchedPatternArray) {\n        if (matchedPatternArray[1].length && matchedPatternArray[1] !== delimiter) {\n          resultCSV.push([]);\n        }\n\n        const cleanValue = matchedPatternArray[2] ? matchedPatternArray[2].replace(new RegExp('[\\\\\\\\\"](.)', 'g'), '$1') : matchedPatternArray[3];\n        resultCSV[resultCSV.length - 1].push(cleanValue);\n        matchedPatternArray = regexPattern.exec(csvDataString);\n      }\n\n      return resultCSV;\n    }\n\n    getDataRecordsArrayFromCSVFile(csvRecordsArray, headerLength, config) {\n      const dataArr = [];\n      const headersArray = csvRecordsArray[0];\n      const startingRowToParseData = config.header ? 1 : 0;\n\n      for (let i = startingRowToParseData; i < csvRecordsArray.length; i++) {\n        const data = csvRecordsArray[i];\n\n        if (data.length === headerLength && config.header) {\n          const csvRecord = {};\n\n          for (let j = 0; j < data.length; j++) {\n            if (data[j] === undefined || data[j] === null) {\n              csvRecord[headersArray[j]] = '';\n            } else {\n              csvRecord[headersArray[j]] = data[j].trim();\n            }\n          }\n\n          dataArr.push(csvRecord);\n        } else {\n          dataArr.push(data);\n        }\n      }\n\n      return dataArr;\n    }\n\n    isCSVFile(file) {\n      return file.name.toLowerCase().endsWith('.csv');\n    }\n\n    getHeaderArray(csvRecordsArr) {\n      const headers = csvRecordsArr[0];\n      const headerArray = [];\n\n      for (const header of headers) {\n        headerArray.push(header);\n      }\n\n      return headerArray;\n    }\n\n    notCSVFileErrorHandler(observer) {\n      const ngcCSVParserError = this.errorBuilder('NOT_A_CSV_FILE', 'Selected file is not a csv File Type.', 2);\n      observer.error(ngcCSVParserError);\n    }\n\n    unknownCSVParserErrorHandler(observer) {\n      const ngcCSVParserError = this.errorBuilder('UNKNOWN_ERROR', 'Unknown error. Please refer to official documentation for library usage.', 404);\n      observer.error(ngcCSVParserError);\n    }\n\n    badCSVDataFormatErrorHandler(observer) {\n      const ngcCSVParserError = this.errorBuilder('BAD_CSV_DATA_FORMAT', 'Unable to parse CSV File.', 1);\n      observer.error(ngcCSVParserError);\n    }\n\n    errorBuilder(type, message, code) {\n      const ngcCSVParserError = new NgxCSVParserError();\n      ngcCSVParserError.type = type;\n      ngcCSVParserError.message = message;\n      ngcCSVParserError.code = code;\n      return ngcCSVParserError;\n    }\n\n  }\n\n  NgxCsvParser.ɵfac = function NgxCsvParser_Factory(t) {\n    return new (t || NgxCsvParser)();\n  };\n\n  NgxCsvParser.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxCsvParser,\n    factory: NgxCsvParser.ɵfac,\n    providedIn: 'root'\n  });\n  return NgxCsvParser;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxCsvParserComponent = /*#__PURE__*/(() => {\n  class NgxCsvParserComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  NgxCsvParserComponent.ɵfac = function NgxCsvParserComponent_Factory(t) {\n    return new (t || NgxCsvParserComponent)();\n  };\n\n  NgxCsvParserComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxCsvParserComponent,\n    selectors: [[\"lib-ngx-csv-parser\"]],\n    decls: 2,\n    vars: 0,\n    template: function NgxCsvParserComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" ngx-csv-parser works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return NgxCsvParserComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxCsvParserModule = /*#__PURE__*/(() => {\n  class NgxCsvParserModule {}\n\n  NgxCsvParserModule.ɵfac = function NgxCsvParserModule_Factory(t) {\n    return new (t || NgxCsvParserModule)();\n  };\n\n  NgxCsvParserModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxCsvParserModule\n  });\n  NgxCsvParserModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [NgxCsvParser]\n  });\n  return NgxCsvParserModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API Surface of ngx-csv-parser\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxCSVParserError, NgxCsvParser, NgxCsvParserComponent, NgxCsvParserModule }; //# sourceMappingURL=ngx-csv-parser.mjs.map","map":null,"metadata":{},"sourceType":"module"}